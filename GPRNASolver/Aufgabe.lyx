#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Übung 8
\end_layout

\begin_layout Author
Ruman Gerst, 136994
\end_layout

\begin_layout Part*
Aufgabe 1
\end_layout

\begin_layout Standard
Ich implementiere ein eigenes GP-System in der Programmiersprache Java,
 das eine RNA-Sequenz als Eingabe hat und eine Sekundärstruktur generieren
 soll.
 Das durch GP erzeugte Programm soll eine möglichst energetisch günstige
 RNA-Sekundärstrukur erzeugen, indem es nacheinander die einzelnen Nukleotide
 an die Struktur anhängt.
\end_layout

\begin_layout Section*
Herstellen einer RNA-Struktur
\end_layout

\begin_layout Standard
Da wie oben beschrieben, die Struktur inkrementell erweitert wird, muss
 ein initiales Startnukleotid gesetzt werden.
 Alle anderen Nukleotide werden dann vom Programm hinzugefügt.
 Ein ungefährer Ablauf wäre also:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

setInitialNucleotide()
\end_layout

\begin_layout Plain Layout

WHILE queue.NotEmpty()
\end_layout

\begin_layout Plain Layout

	appendNucleotide(direction)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Es wird immer von dem aktuellen Nukleotid ausgegangen und dann ein weiteres
 links, rechts oder geradeaus der Richtung (5' -> 3') hinzugefügt:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename Aufgabe/direction.png
	width 5cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Richtungen beim Hinzufügen von Nukleotiden
\begin_inset CommandInset label
LatexCommand label
name "fig:Richtungen-beim-Hinzufügen"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Es wird also immer in relativer Richtung hinzugefügt.
 Wenn es keine Kollisionen gibt, dann kann mit dieser Technik die komplette
 Sekundärstruktur aufgabut werden.
\end_layout

\begin_layout Section*
Bewertung der Struktur
\end_layout

\begin_layout Standard
Eine Struktur wird nach der Energieminimierungsregel bewertet, also 
\begin_inset Formula $e={\textstyle {\displaystyle {\displaystyle \sum_{n}}}}energy(n)$
\end_inset

 für alle n Nukleotide.
 Folgende Energiewerte werden benutzt:
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="3">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="5cm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Energie
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Anmerkung
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
G-C
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A-U
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
G-U
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Keine Bindung
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sterische Konflikte pro Nukleotid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Es werden die Nukleotide drumherum betrachtet.
 Wenn eines nicht der Vorgänger, Nachfolger oder der Partner (oder dessen
 Vorgänger/Nachfolger) ist, wird das entsprechend bewertet.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Energiewerte für Bewertung eines Nukleotids
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section*
Individuum
\end_layout

\begin_layout Standard
Ein Individuum hat eine vorbestimmt Anzahl an Registern 
\begin_inset Formula $R=\{Menge\, an\, Registern\}$
\end_inset

.
 Jedes Register ist ein Tupel 
\begin_inset Formula $R_{x}=(l,P,v)$
\end_inset

 mit l ist Label, P die Menge an Parametern und v der aktuelle Wert des
 Registers.
 l und P werden mit einer Interpretationsfunktion auf die Menge an Terminalen
 
\begin_inset Formula $\mathbb{Z}$
\end_inset

 abgebildet.
 Das Terminal wird im Tupel als Wert gespeichert.
 Also: 
\begin_inset Formula $I(R_{x})=R_{x}'\Longleftrightarrow I((l,P,v))=(l,p,v')$
\end_inset

 .
\end_layout

\begin_layout Standard
Beim Ablaufen des Programms werden für jedes Nukleotid in der Sequenz alle
 Register nacheinander ausgeführt und der Wert des letzen Registers in eine
 relative Richtung umgewandelte mit 
\begin_inset Formula $dir(x)=\begin{cases}
links & (x+1)\, mod\,3=0\\
geradeaus & (x+1)\, mod\,3=1\\
rechts & (x+1)\, mod\,3=2
\end{cases}$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

FOR EACH nucleotide IN sequence:
\end_layout

\begin_layout Plain Layout

	FOR i = 0 TO COUNT(Register):
\end_layout

\begin_layout Plain Layout

		R(i) <- Interpret(R(i))
\end_layout

\begin_layout Plain Layout

	appendNucleotide(nucleotide, dir(R(x))) //R(x) ist letztes Register
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Funktionen
\end_layout

\begin_layout Standard
Ein Register unterscheidet zwischen richtigen Funktionen und Terminal-Funktionen.
 Eine Terminal-Funktion ist hierbei eine spezielle Funktion, die keinen
 Parameter hat und einen terminalen Wert (also eine Ganzzahl) zurückgibt.
 Zum Beispiel sind die PUT_x-Funktionen Terminalfunktionen, da sie keinen
 Parameter haben und eine Zahl zurückgeben (-1, wenn ein Nukleotid nicht
 hinzugefügt werden konnte oder sonst die jetztige Sequenzlänge).
\end_layout

\begin_layout Standard
Andere Funktionen, wie LOOK_BACK P1 sind keine Terminalfunktionen.
 Der Parameter einer Nicht-Terminalen Funktion kann aber eine Terminalfunktion
 oder ein Terminal sein.
 Beispiel:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

LOOK_BACK PUT_STRAIGHT //Funktioniert
\end_layout

\begin_layout Plain Layout

LOOK_BACK 5 //Funktioniert
\end_layout

\begin_layout Plain Layout

LOOK_BACK LOOK_FORWARD 5 //Funktioniert nicht!
\end_layout

\begin_layout Plain Layout

IF_EQUAL R1 R4 SKIP SKIP2 //Funktioniert
\end_layout

\end_inset


\end_layout

\begin_layout Standard
(D.h.
 Ein Parameter kann entweder ein Terminal sein oder eine Terminalfunktion)
\end_layout

\begin_layout Standard
Wie bereits oben beschrieben, gibt es neben PUT_STRAIGHT, PUT_LEFT, PUT_RIGHT
 noch weitere Funktionen, von denen nun einige näher erläutert werden:
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="3">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="5cm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Label
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Art
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Beschreibung
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Rx mit x = Registerindex
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Terminal
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gibt Wert des Registers 
\begin_inset Formula $R_{x}$
\end_inset

 zurück
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ENERGY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Terminal
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gibt gegenwärtige Energie zurück
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SKIP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Terminal
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Addiert 1 zum bzr, sodass das nächste Register geskippt wird.
 Akkumuliert sich bei mehreren Aufrufen.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ROUT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Terminal
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gibt Wert des letzten Registers zurück.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SKIPx mit x = 0 ...
 Registerindex
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Terminal
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Überspringt x Register.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RETURN P1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nicht-Terminal
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Setzt letztes Register 
\begin_inset Formula $R_{x}$
\end_inset

 auf P1 und den BZR auf die Sequenzlänge.
 Das Programm benutzt dann P1 für die Richtung.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LOOK_BACK P1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nicht-Terminal
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gibt Nukleotid P1 Stellen vor aktuellen zurück (in Zahlenrepräsentation)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
...
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
...
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
...
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Einige Funktionen, die ein Register beherrscht.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section*
Rekombination
\end_layout

\begin_layout Standard
Es wird eine Ein-Punkt-Rekombination der Register zwischen zwei Individuen
 durchgeführt.
 Die Rekombination erfolt mit einer bestimmten Rekombinationswahrscheinlichkeit.
\end_layout

\begin_layout Section*
Mutation
\end_layout

\begin_layout Standard
Es gibt potentiell 2 Arten der Mutation: Es wird ein Parameter (Terminal
 oder Terminalfunktion) durch einen anderen Parameter ausgetauscht oder
 das Register wird komplett ausgetauscht.
 Es wird eine Kombination der zwei Mutationsarten durchgeführt.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

register <- RANDOM_REGISTER(p)
\end_layout

\begin_layout Plain Layout

parameter <- RANDOM_INT(COUNT(register.parameters) + 1)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

IF parameter == 0:
\end_layout

\begin_layout Plain Layout

	Register durch random Register ersetzen
\end_layout

\begin_layout Plain Layout

ELSE:
\end_layout

\begin_layout Plain Layout

	Mutate register.parameter[parameter - 1] //Parameter wird durch Random Terminal
 oder Terminalfkt.
 ausgetauscht
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Allgemeiner Ablauf
\end_layout

\begin_layout Standard
Das Programm beginnt mit einer Initialpopulation, die Bewertet wird.
 Es werden dann 200 mal 2 Eltern mit Turnierselektion ausgewählt und dann
 jeweils 2 Kinder erzeugt.
 Die Elterngeneration ist nicht Teil der neuen Generation.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

population <- RANDOM_POPULATION(400)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

DO 1000 TIMES:
\end_layout

\begin_layout Plain Layout

	population.run()
\end_layout

\begin_layout Plain Layout

	population.evaluate()
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	DO 200 TIMES:
\end_layout

\begin_layout Plain Layout

		p1,p2 <- turnierSelection(n=50, q=2)
\end_layout

\begin_layout Plain Layout

		child1,child2 <- recombine(p1, p2)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		mutate(child1)
\end_layout

\begin_layout Plain Layout

		mutate(child2)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		newpop.add(child1, child2)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	population <- newpop
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

		
\end_layout

\end_inset


\end_layout

\begin_layout Part*
Aufgabe 2
\end_layout

\begin_layout Standard
Problem ist das selbe, was ich als GP-System implementiere - es ist in Aufgabe
 1 beschrieben.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="10cm">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Objective
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ein Computerprogramm, das eine RNA-Sekundärstruktur durch inkrementellen
 Aufbau erzeugt, möglichst im Energieminimum und mit Ähnlichkeit zu einer
 bereits berechneten Sequenz.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Terminal set
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Alle Ganzzahlen
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Function set
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IF_LESS, IF_GREATER, IF_EQUAL, ADD, SUBTRACT, MULTIPLY, DIVIDE, LOOK_BACK,
 LOOK_FORWARD, GETBOND, COLLIDE_STRAIGHT, COLLIDE_LEFT, COLLIDE_RIGHT, ENERGY,LE
NGTH,STACK,R0 ...
 Ri (Verweise auf Register), PURINE, PYRIMIDINE, PREV, NEXT, DO, SKIP, SKIPi
 (Überspringe i Register), PRG5, RETURN, LEFT, RIGHT, STRAIGHT, ROUT
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fitness cases
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Raw fitness
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Energie der erzeugten RNA-Struktur nach 
\begin_inset Formula $|Sequenz|$
\end_inset

 Durchläufen.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Standardized fitness
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Raw fitness plus Anzahl an Nucleotiden, die nicht eingebaut wurden mal 8.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hits
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Energie minimiert.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Wrapper
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Keiner
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $M=400$
\end_inset

, 
\begin_inset Formula $G=200$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Success predicate
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Absolutes Energieminimum.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_body
\end_document
