#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 4cm
\topmargin 3cm
\rightmargin 3cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Übung 10
\end_layout

\begin_layout Author
Ruman Gerst, 136994
\end_layout

\begin_layout Part*
Vergleich zwischen Baum- und Linear-GP
\end_layout

\begin_layout Standard
Das RNA-Faltungsproblem, das bereits als GP mit linearer Repräsentation
 implementiert wurde, wird mit einem ähnlichen Funktionsset als Baum-GP
 implementiert.
 Neben dem Wegfall einiger Funktionen bleibt der Funktionsumfang gleich.
\end_layout

\begin_layout Section*
Änderungen des ursprünglichen Programms
\end_layout

\begin_layout Standard
Das Programm wurde gegenüber den letzen Stand weiter verändert.
 So wurde die Bindungs-Funktion aktualisiert und bereinigt, sowie eine Unterstüt
zung für das Einbringen mehrerer RNA-Sequenzen als Eingabe eingefügt.
\end_layout

\begin_layout Standard
Die Fitness eines Individuums ist nun die Summe der einzelnen Fitness-Werte
 der RNA-Sequenzen 
\begin_inset Formula $F(I)=\frac{1}{\#(RNA)}\underset{rna}{\sum}fitness(I,rna)$
\end_inset

 mit 
\begin_inset Formula $fitness(I,rna)=\frac{energy(I,rna)+|stack|\cdot14}{|rna|}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula $energy(I,rna)$
\end_inset

 ist die Energie der RNA als Sekundärstruktur nach dem Bindungs-Modell.
 
\begin_inset Formula $|stack|$
\end_inset

 ist die Anzahl an nicht eingebauten Nukleotiden, die negativ bewertet wird.
 Multipliziert wird der Wert mit der negativen Energie, die ein G-C-Paar
 in die Struktur einbringt plus 2 (also schlechter bewertet).
\end_layout

\begin_layout Section*
Implementierung als Baum-GP
\end_layout

\begin_layout Standard
Der Funktionssatz bleibt mit Außnahme der RETURN-Funktion und der SKIP-Funktion
 der selbe.
 Eine Funktion, die das Individuum benutzt ist erst einmal eine Top-Level-Funkti
on, die einen Parameter hat.
 Im Gegensatz zum Linearen GP dürfen im Baum-GP Parameter wieder Funktionen
 mit Parameter sein.
 Der Parameter der Top-Level-Funktion wird zufällig gewählt.
 Dabei wird ein Baum von maximal 7 Tiefe erzeugt, was auch für jeden anderen
 Fall der Erzeugung eines zufälligen (Teil)-Baums zutrifft.
\end_layout

\begin_layout Standard
Mutiert und rekombiniert wird nach Koza.
 Bei der Mutation wird mit einer bestimmten Mutationswahrscheinlichkeit
 erst mutiert.
\end_layout

\begin_layout Section*
Tests
\end_layout

\begin_layout Standard
Getestet wird mit einer Generationszahl von 4000 Generationen mit zwei RNA-Seque
nzen als Eingabe.
 Es gibt 3 ADF mit je 3 Parametern als Eingabe.
 Die Mutationswahrscheinlichkeit beträgt 
\begin_inset Formula $\frac{1}{20}$
\end_inset

, die Rekombinationswahrscheinlichkeit 
\begin_inset Formula $0,2$
\end_inset

.
 Das lineare GP benutzt in der Hauptfunktion und in den ADF 20 Register.
\end_layout

\begin_layout Standard
Es werden die Ergebnisse der jeweiligen Testläufe mit folgenden Sequenzen
 betrachtet:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

>G-C-RNA
\end_layout

\begin_layout Plain Layout

GGGGGGGGGGGGGGGCGCGCCCCCCCCCCCC
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

>Äquivalente RNA mit A-U
\end_layout

\begin_layout Plain Layout

AAAAAAAAAAAAAAAUAUAUUUUUUUUUUUU
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Lineares GP
\end_layout

\begin_layout Standard
Ein relativ guter Lauf beim linaren GP ergibt, trotz Einbeziehung von einer
 anderen Sequenz ein leichtes Overfitting, falls ein gutes Ergebnis herauskommt.
 Bei diesen Eingabesequenzen ist Overfitting nur schwer zu dämpfen, da ein
 gutes Ergebnis der G-C-Sequenz ein schlechtes Ergebnis der A-U-Sequenz
 überlagern kann.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename Übung10/GC_Linear_Duo_2.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Beide Sequenzen bei einem linearen GP, Fitness -3.870967741935484
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Der Code, der dabei entsteht lässt sich in eine Baum-Repräsentation bringen:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#ADF0 20 3
\end_layout

\begin_layout Plain Layout

[...]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#ADF1 20 3
\end_layout

\begin_layout Plain Layout

[...]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#ADF2 20 3
\end_layout

\begin_layout Plain Layout

[...]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#MAIN 20 0
\end_layout

\begin_layout Plain Layout

LOOK_FORWARD LEFT
\end_layout

\begin_layout Plain Layout

R14
\end_layout

\begin_layout Plain Layout

LOOK_FORWARD NORTH
\end_layout

\begin_layout Plain Layout

R7
\end_layout

\begin_layout Plain Layout

IF_EQUAL R17 NORTH R1 R19
\end_layout

\begin_layout Plain Layout

AVG R9 RIGHT NORTH R5 R5
\end_layout

\begin_layout Plain Layout

AVG EAST STACK SKIP1 SKIP5 R6
\end_layout

\begin_layout Plain Layout

IF_GREATER ENERGY_OLD COLLIDE_LEFT R6 R5
\end_layout

\begin_layout Plain Layout

IF_LESS LEFT SKIP4 SKIP1 R16
\end_layout

\begin_layout Plain Layout

STRAIGHT
\end_layout

\begin_layout Plain Layout

NUC RLEFT
\end_layout

\begin_layout Plain Layout

SKIP3
\end_layout

\begin_layout Plain Layout

SUBTRACT R4 R13
\end_layout

\begin_layout Plain Layout

IF_EQUAL R10 RLEFT R18 R2
\end_layout

\begin_layout Plain Layout

SOUTH_WEST
\end_layout

\begin_layout Plain Layout

R16
\end_layout

\begin_layout Plain Layout

IF_LESS LENGTH R6 SKIP9 R18
\end_layout

\begin_layout Plain Layout

CALCULATE_ENERGY R19 R2
\end_layout

\begin_layout Plain Layout

IF_GREATER RRIGHT RSTRAIGHT SKIP6 RRIGHT
\end_layout

\begin_layout Plain Layout

AVG SOUTH PREV R5 LENGTH R17
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename Übung10/GC_Linear_Duo_Treeed.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Aquivalente Baum-Repräsentation des Codes des Linear-GP.
 Vorwärts-Referenzen wurden durch STRAIGHT (=0) ausgetauscht.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Baum-GP
\end_layout

\begin_layout Standard
Wenn der Baum-GP das lokale Minimum von der Optimierung der GC-Sequenz überwinde
t, dann werden sowohl AU-Sequenz, als auch GC-Sequenz gleich gut optimiert.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename Übung10/GC_Tree_Duo.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Beide Sequenzen bei Benutzung einer Baum-GP, Fitness -5.032258064516129
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Der Baum, der ausgerechnet wurde, ist relativ komplex und groß; dafür schafft
 er es, beide Sequenzen gleich gut zu optimieren.
\end_layout

\begin_layout Subsubsection*
Erzeugter Baum
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

ADF0:(ADF0 (P1))
\end_layout

\begin_layout Plain Layout

ADF1:(ADF1 (SOUTH_WEST))
\end_layout

\begin_layout Plain Layout

ADF2:(ADF2 (EAST))
\end_layout

\begin_layout Plain Layout

MAIN:(MAIN (PURINE (MAX (RSTRAIGHT) (SOUTH) (MIN (COLLIDE_LEFT) (SOUTH_EAST)
 (STACK) (G) (NORTH)) (SOUTH) (MIN (IF_LESS (COLLIDE_LEFT) (ADF0 (COLLIDE_LEFT)
 (C) (ADF1 (GETBOND (STRAIGHT) (WEST)) (NUC (SOUTH_EAST)) (EAST))) (RIGHT)
 (LOOK_FORWARD (ADF1 (LOOK_FORWARD (RSTRAIGHT)) (STACK) (STACK)))) (MAX
 (SOUTH) (STRAIGHT) (RSTRAIGHT) (LEFT) (C)) (COLLIDE_LEFT) (EAST) (RLEFT)))))
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename Übung10/GC_Tree_Duo_TreeImage.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Graphische Repräsentation des Baums, der vom Baum-GP erzeugt wurde.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Diese Baum-Struktur lässt sich in ein äquivalentes lineares Programm umschreiben
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#ADF0:
\end_layout

\begin_layout Plain Layout

R0: P1
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#ADF1:
\end_layout

\begin_layout Plain Layout

R0: SOUTH_WEST
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#ADF2:
\end_layout

\begin_layout Plain Layout

R0: EAST
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#MAIN:
\end_layout

\begin_layout Plain Layout

R0: MAX SOUTH STRAIGHT RSTRAIGHT LEFT C
\end_layout

\begin_layout Plain Layout

R1: LOOK_FORWARD RSTRAIGHT
\end_layout

\begin_layout Plain Layout

R2: ADF1 R1 STACK STACK
\end_layout

\begin_layout Plain Layout

R3: LOOK_FORWARD R2
\end_layout

\begin_layout Plain Layout

R4: NUC SOUTH_EAST
\end_layout

\begin_layout Plain Layout

R5: GETBOND STRAIGHT WEST
\end_layout

\begin_layout Plain Layout

R6: ADF1 R5 R4 EAST
\end_layout

\begin_layout Plain Layout

R7: ADF0 COLLIDE_LEFT C R6
\end_layout

\begin_layout Plain Layout

R8: IF_LESS COLLIDE_LEFT R7 RIGHT R3
\end_layout

\begin_layout Plain Layout

R9: MIN R8 R0 COLLIDE_LEFT EAST RLEFT
\end_layout

\begin_layout Plain Layout

R10: MIN COLLIDE_LEFT SOUTH_EAST STACK G NORTH
\end_layout

\begin_layout Plain Layout

R11: MAX RSTRAIGHT SOUTH R10 SOUTH R9
\end_layout

\begin_layout Plain Layout

R12: PURINE R11
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Vergleich der Ergebnisse
\end_layout

\begin_layout Standard
Beim Vergleich zwischen dem linearen und dem Baum-GP wird deutlich, dass
 das lineare GP viele redundate Register hat.
 So hat das Baum-GP, das ein viel besseres Ergebnis hat, einen großen Baum,
 benutzt aber effektiv nur 15 Register, wobei 3 von diesen sogar weggelassen
 werden können (Die ADF haben nur eine Funktion).
 Wenn man nun ein lineares Programm in einen Baum umwandelt, so ist dieser
 Baum im Verhältis zur Anzahl der Register sehr klein.
\end_layout

\begin_layout Standard
Bäume haben also weniger Redundanzen als lineare Programme und können zusätzlich
 theoretisch beliebig groß werden, wobei bei der Implementation als Baum-GP
 ähnliche Verhaltensweisen der Optimierung auftreten.
 So benötigt auch beim Baum-GP der Algorithmus eine 'Anlaufzeit', um die
 erste Optimierung auszuwürfeln.
 Auch ein Baum-GP kann in einem lokalen Minimum gefangen sein, wobei dies
 bei den Tests etwas weniger auftrat als beim linearen GP.
 Zusätzlich hat das Baum-GP einen klein
\end_layout

\end_body
\end_document
